// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  INVESTOR
  LISTER
  ADMIN
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum ListingStatus {
  PENDING
  LIVE
  PAUSED
  CLOSED
}

enum OrderType {
  LIST
  BUY
  SELL
}

enum OrderStatus {
  OPEN
  FILLED
  CANCELLED
}

enum ProposalStatus {
  OPEN
  CLOSED
}

enum VoteChoice {
  YES
  NO
}

enum PayoutReason {
  DIVIDEND
  BUYOUT
}

enum DocumentKind {
  DEED
  SURVEY
  IMAGE
  OTHER
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  role          UserRole   @default(INVESTOR)
  walletAddress String?    @unique
  kycStatus     KycStatus  @default(PENDING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  listings      Listing[]
  orders        Order[]
  votes         Vote[]
  documents     Document[]
  payouts       Payout[]

  @@map("users")
}

model Listing {
  id                String        @id @default(cuid())
  title             String
  description       String
  locationText      String
  geoJson           Json?         // GeoJSON for parcel boundaries
  parcelSize        Decimal       @db.Decimal(15, 2) // in acres
  coordinatePolicy  Boolean       @default(true)
  coordinatePolicyNote String?    @default("Buyers own a part of the parcel without exact coordinates")
  totalShares       Int           @default(100)
  pricePerShare     Decimal       @db.Decimal(15, 8) // in SOL
  ownerId           String
  status            ListingStatus @default(PENDING)
  collectionMint    String?       @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  owner             User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  shareTokens       ShareToken[]
  orders            Order[]
  proposals         Proposal[]
  payouts           Payout[]
  documents         Document[]

  @@index([status])
  @@index([ownerId])
  @@index([createdAt])
  @@map("listings")
}

model ShareToken {
  id           String  @id @default(cuid())
  listingId    String
  mintAddress  String  @unique
  indexNumber  Int     // 1-based index within the listing
  metadataUri  String?

  // Relations
  listing      Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@unique([listingId, indexNumber])
  @@index([listingId])
  @@map("share_tokens")
}

model Order {
  id          String      @id @default(cuid())
  type        OrderType
  listingId   String
  shareMint   String
  sellerId    String?
  buyerId     String?
  price       Decimal     @db.Decimal(15, 8)
  status      OrderStatus @default(OPEN)
  txSignature String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  listing     Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)
  shareToken  ShareToken  @relation(fields: [shareMint], references: [mintAddress], onDelete: Cascade)
  seller      User?       @relation(fields: [sellerId], references: [id])
  buyer       User?       @relation(fields: [buyerId], references: [id])

  @@unique([shareMint, status], map: "unique_active_order_per_share")
  @@index([listingId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model Proposal {
  id          String         @id @default(cuid())
  listingId   String
  title       String
  description String
  startsAt    DateTime
  endsAt      DateTime
  status      ProposalStatus @default(OPEN)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  listing     Listing        @relation(fields: [listingId], references: [id], onDelete: Cascade)
  votes       Vote[]

  @@index([listingId])
  @@index([status])
  @@index([endsAt])
  @@map("proposals")
}

model Vote {
  id           String     @id @default(cuid())
  proposalId   String
  userId       String
  weightDecimal Decimal   @db.Decimal(15, 8) // Weight based on share ownership
  choice       VoteChoice
  createdAt    DateTime   @default(now())

  // Relations
  proposal     Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([proposalId, userId])
  @@index([proposalId])
  @@index([userId])
  @@map("votes")
}

model Payout {
  id           String       @id @default(cuid())
  listingId    String
  amount       Decimal      @db.Decimal(15, 8)
  reason       PayoutReason
  txSignature  String?
  createdAt    DateTime     @default(now())

  // Relations
  listing      Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?

  @@index([listingId])
  @@index([reason])
  @@index([createdAt])
  @@map("payouts")
}

model Document {
  id          String       @id @default(cuid())
  listingId   String
  kind        DocumentKind
  storagePath String
  uploadedBy  String
  createdAt   DateTime     @default(now())

  // Relations
  listing     Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([kind])
  @@map("documents")
}